{"version":3,"sources":["components/NavBar.jsx","components/Home.jsx","components/RecipeInfo.jsx","components/Recipes.jsx","components/SearchRecipes.jsx","components/SavedRecipes.jsx","components/Forms.jsx","components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","Navbar","bg","expand","variant","Nav","className","Link","href","Button","Form","inline","FormControl","type","placeholder","Home","Container","fluid","RecipeInfo","recipes","this","props","recipe","map","Card","Img","src","image","Body","Title","label","Text","yield","calories","block","Component","Recipes","state","baseURL","recipeName","searchURL","handleSubmit","bind","handleChange","event","setState","target","id","value","preventDefault","fetch","then","response","json","hits","recipeTitle","err","console","log","toggleSearch","Label","htmlFor","Control","onChange","onClick","SearchRecipes","searched","data","toggle","SavedRecipes","setOrdered","require","config","Forms","userName","password","password2","message","redirects","currentTarget","method","body","JSON","stringify","headers","res","setUser","redirect","to","Group","onSubmit","evt","React","Login","App","addRecipes","newRecipes","localStorage","setItem","exact","path","component","render","Error","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"kVAKe,SAASA,IACpB,OAEI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,KAAKC,QAAQ,QAClC,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUC,KAAK,KAAf,QACA,kBAACH,EAAA,EAAIE,KAAL,CAAUC,KAAK,UAAf,iBACA,kBAACC,EAAA,EAAD,CAAQD,KAAK,SAASJ,QAAQ,iBAA9B,UAER,kBAACM,EAAA,EAAD,CAAMC,QAAM,GACZ,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,iBAAiBR,UAAU,YAC5D,kBAACG,EAAA,EAAD,CAAQL,QAAQ,iBAAhB,YCXG,SAASW,IACpB,OACJ,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACb,0TACA,kBAACR,EAAA,EAAD,CAAQL,QAAQ,WAAhB,mB,oBCkCYc,E,uKAnCX,IAAMC,EAAUC,KAAKC,MAAMC,OAAOC,KAAI,SAAAJ,GACpC,OAKE,kBAACK,EAAA,EAAD,CAAMlB,UAAU,oCACd,kBAACkB,EAAA,EAAKC,IAAN,CAAUrB,QAAQ,MAAMsB,IAAKP,EAAQG,OAAOK,QAC5C,kBAACH,EAAA,EAAKI,KAAN,CAAWtB,UAAU,sBACnB,yBAAKA,UAAU,uCACb,kBAACkB,EAAA,EAAKK,MAAN,CAAYvB,UAAU,yBAAyBa,EAAQG,OAAOQ,QAEhE,kBAACN,EAAA,EAAKO,KAAN,CAAWzB,UAAU,kBAArB,WAA+Ca,EAAQG,OAAOU,MAA9D,KACA,kBAACR,EAAA,EAAKO,KAAN,CAAWzB,UAAU,kBAArB,aAAiDa,EAAQG,OAAOW,UAChE,kBAACxB,EAAA,EAAD,CAEEH,UAAU,2BACVF,QAAQ,UACR8B,OAAK,GAJP,kBAYR,OACE,6BACE,uCACCf,O,GA/BgBgB,aCwFVC,E,kDAxFX,WAAaf,GAAQ,IAAD,8BACpB,cAAMA,IACDgB,MAAQ,CACXC,QAAS,4FAITC,WAAY,GACZC,UAAW,IAUb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAnBA,E,yDAsBTE,GACXxB,KAAKyB,SAAL,eAAiBD,EAAME,OAAOC,GAAKH,EAAME,OAAOE,U,mCAErCJ,GAAQ,IAAD,OAClBA,EAAMK,iBACN7B,KAAKyB,SAAS,CACZL,UAAWpB,KAAKiB,MAAMC,QAAUlB,KAAKiB,MAAME,aAC1C,WACDW,MAAM,EAAKb,MAAMG,WACdW,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACfF,MAAK,SAAAE,GAAI,OAAI,EAAKR,SAAS,CAC5BvB,OAAQ+B,EAAKC,KAEbC,YAAa,QAEb,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,SAEvBpC,KAAKC,MAAMsC,iB,+BAKL,IAAD,OACP,OACE,kBAAC3C,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACP,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKkD,MAAN,CAAYC,QAAQ,cAApB,UACA,kBAACnD,EAAA,EAAKoD,QAAN,CACEf,GAAG,aACHlC,KAAK,OACLmC,MAAO5B,KAAKiB,MAAME,WAClBwB,SAAU3C,KAAKuB,eAEjB,kBAAClC,EAAA,EAAD,CAAQI,KAAK,SAASmD,QAAS,SAACpB,GAAD,OAAW,EAAKH,aAAaG,KAA5D,gBAIAxB,KAAKiB,MAAMf,OACT,kBAAC,EAAD,CAAYA,OAAQF,KAAKiB,MAAMf,SAC/B,Q,GA/DUa,aCCD8B,E,4MACnB5B,MAAQ,CACN6B,UAAU,EACVC,KAAM,I,EAERR,aAAe,EAAKA,aAAajB,KAAlB,gB,6DAGb,IAAI0B,GAAUhD,KAAKiB,MAAM6B,SACzB9C,KAAKyB,SAAS,CACZqB,SAAWE,M,+BAKb,OACE,kBAACpD,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,EAAD,CAAS0C,aAAcvC,KAAKuC,aAAcQ,KAAM/C,KAAKiB,MAAM8B,KAAMD,SAAU9C,KAAKiB,MAAM6B,gB,GAjBnD/B,aCA5B,SAASkC,EAAT,GAA6C,IAArBF,EAAoB,EAApBA,KAAMG,EAAc,EAAdA,WACzC,OACE,kBAAC9C,EAAA,EAAD,CAAMlB,UAAU,oCACd,kBAACkB,EAAA,EAAKC,IAAN,CAAUrB,QAAQ,MAAMsB,IAAKyC,EAAKxC,QAClC,kBAACH,EAAA,EAAKI,KAAN,CAAWtB,UAAU,sBACnB,yBAAKA,UAAU,uCACb,kBAACkB,EAAA,EAAKK,MAAN,CAAYvB,UAAU,yBAAyB6D,EAAKrC,QAEtD,kBAACN,EAAA,EAAKO,KAAN,CAAWzB,UAAU,kBAAkB6D,EAAKnC,OAC5C,kBAACvB,EAAA,EAAD,CACEuD,QAAS,kBAAMM,KACfhE,UAAU,2BACVF,QAAQ,UACR8B,OAAK,GAJP,eCZVqC,EAAQ,IAAUC,S,IA8FHC,E,4MA1FbpC,MAAQ,CACNqC,SAAU,GACVC,SAAU,GACVC,UAAW,GACXC,QAAS,GACTC,WAAW,G,EAGbnC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAMmC,cAAchC,GAAKH,EAAMmC,cAAc/B,S,EAKlDP,aAAe,SAACG,GACdA,EAAMK,iBACNC,MAAM,kCAAmC,CACvC8B,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBT,SAAU,EAAKrC,MAAMqC,SACrBC,SAAU,EAAKtC,MAAMsC,SACrBC,UAAW,EAAKvC,MAAMuC,YAExBQ,QAAS,CACP,eAAgB,sBAEjBjC,MAAK,SAAAkC,GACN,OAAOA,EAAIhC,UACVF,MAAK,SAAAgB,GACFA,EAAKU,QACP,EAAKhC,SAAS,CACZgC,QAASV,EAAKU,WAGhB,EAAKxD,MAAMiE,QAAQnB,GACnB,EAAKtB,SAAS,CACZ6B,SAAU,GACVC,SAAU,GACVC,UAAW,GACXW,UAAU,S,uDAMR,IAAD,OACP,OAAInE,KAAKiB,MAAMkD,SACN,kBAAC,IAAD,CAAUC,GAAG,MAGpB,kBAACxE,EAAA,EAAD,KACA,kBAACN,EAAA,EAAK+E,MAAN,CAAYC,SAAU,SAACC,GAAD,OAAS,EAAKlD,aAAakD,KAC/C,kBAACjF,EAAA,EAAKkD,MAAN,CAAYC,QAAQ,YAApB,cACA,kBAACnD,EAAA,EAAKoD,QAAN,CAAcjD,KAAK,OAAOkC,GAAG,WAC3BgB,SAAU,SAAC4B,GAAD,OAAS,EAAKhD,aAAagD,IACrC3C,MAAO5B,KAAKiB,MAAMqC,WACpB,6BAEA,kBAAChE,EAAA,EAAKkD,MAAN,CAAYC,QAAQ,YAApB,cACA,kBAACnD,EAAA,EAAKoD,QAAN,CAAcjD,KAAK,WAAWkC,GAAG,WAC/BgB,SAAU,SAAC4B,GAAD,OAAS,EAAKhD,aAAagD,IACrC3C,MAAO5B,KAAKiB,MAAMsC,WACpB,6BAGA,kBAACjE,EAAA,EAAKkD,MAAN,CAAYC,QAAQ,aAApB,uBACA,kBAACnD,EAAA,EAAKoD,QAAN,CAAcjD,KAAK,WAAWkC,GAAG,YAC/BgB,SAAU,SAAC4B,GAAD,OAAS,EAAKhD,aAAagD,IACrC3C,MAAO5B,KAAKiB,MAAMuC,YACpB,6BACCxD,KAAKiB,MAAMwC,QACZ,6BAIA,kBAACpE,EAAA,EAAD,CAAQL,QAAQ,UAAUS,KAAK,SAASmD,QAAS5C,KAAKqB,cAAtD,gB,GA9EYmD,IAAMzD,WCAX,SAAS0D,EAAMxE,GAE1B,OACI,kBAACL,EAAA,EAAD,CAAWC,OAAK,GACZ,6CACA,kBAAC,EAAD,CAAOqE,QAASjE,EAAMiE,QAAShD,QAASjB,EAAMiB,WCE1DiC,EAAQ,IAAUC,SAElB,IA2FesB,E,4MAxFbzD,MAAQ,CACNqC,SAAU,I,EAEZY,QAAU,EAAKA,QAAQ5C,KAAb,gB,EAuBVqD,WAAa,SAACC,K,sDATN7B,GACN/C,KAAKyB,SAAS,CACZ6B,SAAWP,IAEbV,QAAQC,IAAIS,GACZ8B,aAAaC,QAAQ,cAAc/B,EAAKO,Y,+BAwBhC,IAAD,OACP,OACE,kBAAC1D,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACjB,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmG,OAAK,EAACC,KAAK,IAAIC,UAAWtF,IACjC,kBAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,SAASC,UAAWhC,IACtC,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,UAAUC,UAAWpC,IACvC,kBAAC,IAAD,CACEkC,OAAK,EAACC,KAAK,SACXE,OAAQ,SAACjF,GAAD,OACN,kBAACwE,EAAD,iBAAWxE,EAAX,CAAkBiE,QAAS,EAAKA,QAAShD,QA5D1C,+BA8DH,kBAAC,IAAD,CAAO+D,UAAWE,c,GA5DVX,IAAMzD,WCJJqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASP,OAEP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAM1C,c","file":"static/js/main.e6038327.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport {Navbar, Nav, Button, Form, FormControl} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function NavBar() {\n    return (\n        \n        <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n            <Nav className=\"mr-auto\">\n                <Nav.Link href='/'>Home</Nav.Link>\n                <Nav.Link href='/saved'>Saved Recipes</Nav.Link>\n                <Button href='/login' variant='outline-light'>Login</Button>\n            </Nav>\n        <Form inline>\n        <FormControl type=\"text\" placeholder=\"Search Recipes\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-light\">Search</Button>\n        </Form>\n        </Navbar>\n    )\n}","import React from 'react'\n\nimport {Container, Button } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nexport default function Home() {\n    return (\n<Container fluid>\n   <h3> Welcome to Fork_It! Ever had ingredients but not sure what to cook using them? Or ever have multiple recipes for a meal and agonize over creating a compiled grocery list for everything? Look no further, Fork_It has the solution for you! Start exploring by clicking the button below</h3>\n   <Button variant=\"warning\">Search Recipes</Button>\n    \n</Container>\n    )\n}","import React, { Component } from 'react';\nimport {Card, Button, Container} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\n\nclass RecipeInfo extends Component {\n  render() {\n    const recipes = this.props.recipe.map(recipes => {\n      return (\n        // <tr key={ recipes._id }>\n        //     {/* <h1>Hello</h1> */}\n        //   <td>{ recipes.recipe.label }</td>\n        // </tr>\n        <Card className=\"h-100 shadow-sm bg-white rounded\">\n          <Card.Img variant=\"top\" src={recipes.recipe.image} />\n          <Card.Body className=\"d-flex flex-column\">\n            <div className=\"d-flex mb-2 justify-content-between\">\n              <Card.Title className=\"mb-0 font-weight-bold\">{recipes.recipe.label}</Card.Title>\n            </div>\n            <Card.Text className=\"text-secondary\">Yields: {recipes.recipe.yield} </Card.Text>\n            <Card.Text className=\"text-secondary\">Calories :{recipes.recipe.calories}</Card.Text>\n            <Button\n              // onClick={() => setOrdered()}\n              className=\"mt-auto font-weight-bold\"\n              variant=\"success\"\n              block\n            >\n              Show More\n          </Button>\n          </Card.Body>\n        </Card>\n      )\n    })\n    return (\n      <div>\n        <h1>Recipe:</h1>\n        {recipes}\n      </div>\n    )\n  }\n}\n\nexport default RecipeInfo;","import React, { Component } from 'react';\nimport RecipeInfo from './RecipeInfo'\nimport {Card, Button, Container, Form} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass Recipes extends Component {\n    constructor (props) {\n    super(props)\n    this.state = {\n      baseURL: 'https://api.edamam.com/search?app_id=c180e9f7&app_key=15b9007e988ab8d62a093bbfa45635bb&q=',\n    //   api_id: 'app_id=c180e9f7',\n    //   api_key: 'api_key=' + '15b9007e988ab8d62a093bbfa45635bb' +'&q=',\n    //   query: '&',\n      recipeName: '',\n      searchURL: ''\n    }\n\n    //https://api.edamam.com/search?q=chicken&app_id=157c5422&&app_key=e247a1c94159aaaf903bc5d03963f444\n\n    //https://api.edamam.com/api/food-database/v2/parser?nutrition-type=logging&ingr=red%20apple&app_id=f7666d99&app_key=2109bcebbc7b27e68c00ec6699cee81d\n\n\n    //https://api.edamam.com/api/food-database/v2/parser?nutrition-type=logging&ingr=Apple&app_id=f7666d99&api_key=2109bcebbc7b27e68c00ec6699cee81d\n\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(event) {\n    this.setState({ [event.target.id]: event.target.value })\n  }\n  handleSubmit(event) {\n    event.preventDefault()\n    this.setState({\n      searchURL: this.state.baseURL + this.state.recipeName\n    }, () => {\n      fetch(this.state.searchURL)\n        .then(response => {\n          return response.json()\n        }).then(json => this.setState({\n          recipe: json.hits,\n          // recipe: json,\n          recipeTitle: ''\n        }),\n          err => console.log(err))\n    })\n    { this.props.toggleSearch() \n    }\n  }\n\n\n  render() {\n    return (\n      <Container fluid>\n        <Form>\n          <Form.Label htmlFor='recipeName'>Recipe</Form.Label>\n          <Form.Control\n            id='recipeName'\n            type='text'\n            value={this.state.recipeName}\n            onChange={this.handleChange}\n          />\n          <Button type='submit' onClick={(event) => this.handleSubmit(event)}>\n            Find Recipe</Button>\n        </Form>\n\n        {(this.state.recipe)\n          ? <RecipeInfo recipe={this.state.recipe} />\n          : ''\n        }\n\n        {/* <Card className=\"h-100 shadow-sm bg-white rounded\">\n          <Card.Img variant=\"top\" src={this.state.recipe.hits[0].image} />\n          <Card.Body className=\"d-flex flex-column\">\n            <div className=\"d-flex mb-2 justify-content-between\">\n              <Card.Title className=\"mb-0 font-weight-bold\">{this.state.data.label}</Card.Title>\n            </div>\n            <Card.Text className=\"text-secondary\">{this.state.data.yield}</Card.Text>\n            <Button\n              // onClick={() => setOrdered()}\n              className=\"mt-auto font-weight-bold\"\n              variant=\"success\"\n              block\n            >\n              Show More\n          </Button>\n          </Card.Body>\n        </Card> */}\n      </Container>\n    )\n  }\n}\n\n\nexport default Recipes;","import React, { Component } from 'react'\nimport {Card, Button, Container} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Recipes from './Recipes'\n\n\nexport default class SearchRecipes extends Component {\n  state = {\n    searched: false,\n    data: \"\"\n  }\n  toggleSearch = this.toggleSearch.bind(this)\n\n  toggleSearch () {\n    let toggle = !this.state.searched\n    this.setState({\n      searched : toggle\n    })\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Recipes toggleSearch={this.toggleSearch} data={this.state.data} searched={this.state.searched} />\n        {/* {this.state.searched ? (\n          <Card className=\"h-100 shadow-sm bg-white rounded\">\n            <Card.Img variant=\"top\" src={this.state.data.image} />\n            <Card.Body className=\"d-flex flex-column\">\n              <div className=\"d-flex mb-2 justify-content-between\">\n                <Card.Title className=\"mb-0 font-weight-bold\">{this.state.data.label}</Card.Title>\n              </div>\n              <Card.Text className=\"text-secondary\">{this.state.data.yield}</Card.Text>\n              <Button\n                // onClick={() => setOrdered()}\n                className=\"mt-auto font-weight-bold\"\n                variant=\"success\"\n                block\n              >\n                Show More\n          </Button>\n            </Card.Body>\n          </Card>) : (<></>)\n        } */}\n      </Container>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport {Card, Button} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\n\nexport default function SavedRecipes({ data, setOrdered }) {\n    return (\n      <Card className=\"h-100 shadow-sm bg-white rounded\">\n        <Card.Img variant=\"top\" src={data.image} />\n        <Card.Body className=\"d-flex flex-column\">\n          <div className=\"d-flex mb-2 justify-content-between\">\n            <Card.Title className=\"mb-0 font-weight-bold\">{data.label}</Card.Title>\n          </div>\n          <Card.Text className=\"text-secondary\">{data.yield}</Card.Text>\n          <Button\n            onClick={() => setOrdered()}\n            className=\"mt-auto font-weight-bold\"\n            variant=\"success\"\n            block\n          >\n            Show More\n          </Button>\n        </Card.Body>\n      </Card>\n    );\n  }\n  ","import React from 'react'\nimport {Redirect} from 'react-router-dom'\nimport {Form, Button, Container} from 'react-bootstrap'\nrequire('dotenv').config()\n\nclass Forms extends React.Component {\n\n  state = {\n    userName: '',\n    password: '',\n    password2: '',\n    message: '',\n    redirects: false,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.currentTarget.id]: event.currentTarget.value,\n    });\n  }\n\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    fetch('https://localhost:3003/user/new', {\n      method: 'POST',\n      body: JSON.stringify({\n        userName: this.state.userName,\n        password: this.state.password,\n        password2: this.state.password2,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      if (data.message) {\n        this.setState({\n          message: data.message\n        })\n      } else {\n        this.props.setUser(data);\n        this.setState({\n          userName: '',\n          password: '',\n          password2: '',\n          redirect: true\n        });\n      }\n    });\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to=\"/\" />\n    }\n    return (\n      <Container>\n      <Form.Group onSubmit={(evt) => this.handleSubmit(evt)}>\n        <Form.Label htmlFor=\"userName\">Username: </Form.Label>\n        <Form.Control type=\"text\" id=\"userName\"\n          onChange={(evt) => this.handleChange(evt)}\n          value={this.state.userName} />\n        <br />\n\n        <Form.Label htmlFor=\"password\">Password: </Form.Label>\n        <Form.Control type=\"password\" id=\"password\"\n          onChange={(evt) => this.handleChange(evt)}\n          value={this.state.password} />\n        <br />\n\n\n        <Form.Label htmlFor=\"password2\">Re-enter Password: </Form.Label>\n        <Form.Control type=\"password\" id=\"password2\"\n          onChange={(evt) => this.handleChange(evt)}\n          value={this.state.password2} />\n        <br />\n        {this.state.message}\n        <br />\n\n\n\n        <Button variant=\"warning\" type=\"submit\" onClick={this.handleSubmit}>\n    Submit\n  </Button>\n      </Form.Group>\n      </Container>\n\n    )\n\n  }\n}\n\n\n\n\nexport default Forms","import React, { Component } from 'react'\nimport { Container } from 'react-bootstrap'\nimport Forms from './Forms.jsx'\n\n\nexport default function Login(props) {\n\n    return (\n        <Container fluid>\n            <h1>Login/Sign Up</h1>\n            <Forms setUser={props.setUser} baseURL={props.baseURL} />\n        </Container>\n    )\n\n}\n","import React, { Component } from 'react'\nimport {Switch, Route} from 'react-router-dom'\nimport {Container, Button} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.scss'\nimport NavBar from './components/NavBar'\nimport Home from './components/Home'\nimport SearchRecipes from './components/SearchRecipes'\nimport SavedRecipes from './components/SavedRecipes'\nimport Forms from './components/Forms.jsx'\nimport Recipes from './components/Recipes.jsx'\nimport Login from './components/Login'\nrequire('dotenv').config()\n\nlet baseURL= 'https://localhost:3003'\n\nclass App extends React.Component {\n  state = {\n    userName: ''\n  }\n  setUser = this.setUser.bind(this)\n\n  // getRecipes = () => {\n  //   fetch(baseURL + '/fork').then(res => {\n  //     return res.json();\n  //   }).then(data => {\n  //     this.setState({\n  //       userName: data.userName,\n  //       password: data.password,\n  //       password2: data.password2,\n  //     });\n  //   });\n  // }\n\n  setUser(data) {\n    this.setState({\n      userName : data\n    })\n    console.log(data)\n    localStorage.setItem('currentUser',data.userName)\n    // create localStorage.token\n  }\n\n  addRecipes = (newRecipes) => {\n    // const copyRecipes = [...this.state.recipes];\n    // copyRecipes.push(newRecipes);\n    // this.setState({\n    //   recipes: copyRecipes,\n\n    //});\n  }\n\n  // componentDidMount() {\n  //   fetch(baseURL + 'current').then(res => {\n  //     return res.json();\n  //   }).then(data => {\n  //     console.log(data)\n  //     this.setState({\n  //       userName: data\n  //     })\n  //   });\n  // }\n\n  render() {\n    return (\n      <Container fluid>\n        <NavBar />\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route exact path='/saved' component={SavedRecipes} />\n          <Route exact path='/search' component={SearchRecipes} />\n          <Route\n            exact path='/login'\n            render={(props) => (\n              <Login {...props} setUser={this.setUser} baseURL = {baseURL} />\n            )} />\n          <Route component={Error} />\n        </Switch>\n\n\n\n        {/* <table>\n          <tbody>\n            {\n              this.state.recipes.map(recipes => {\n                return (\n                  <tr key={ recipes._id }>\n                    <td>{ recipes.name }</td>\n                  </tr>\n                )\n              })\n            }\n          </tbody>\n        </table> */}\n      </Container>\n    )\n  }\n}\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nReactDOM.render(\n  \n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}